{
    "name": "Langium",
    "scopeName": "source.langium",
    "fileTypes": [
        "langium"
    ],
    "patterns": [
        {
            "include": "#regex"
        },
        {
            "include": "#comments"
        },
        {
            "name": "keyword.control.langium",
            "match": "\\b(grammar|terminal|enum|entry|fragment|hidden|generate|as|with|import|returns)\\b"
        },
        {
            "name": "constant.language.langium",
            "match": "\\b(?i:true|false|number|string)\\b"
        },
        {
            "name": "keyword.symbol.langium",
            "match": "(\\{|\\}|\\:|\\]|\\[|\\(|\\)|(\\??|\\+?)\\=|->|\\=>|<|>|\\,|\\*|\\+|\\@|\\||\\&|\\?|\\!|\\;)"
        },
        {
            "name": "string.quoted.double.langium",
            "begin": "\"",
            "end": "\""
        },
        {
            "name": "string.quoted.single.langium",
            "begin": "'",
            "end": "'"
        }
    ],
    "repository": {
        "comments": {
            "patterns": [
                {
                    "name": "comment.block.langium",
                    "begin": "/\\*",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.langium"
                        }
                    },
                    "end": "\\*/",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.langium"
                        }
                    }
                },
                {
                    "begin": "(^\\s+)?(?=//)",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.whitespace.comment.leading.cs"
                        }
                    },
                    "end": "(?=$)",
                    "name": "comment.line.langium"
                }
            ]
        },
        "regex": {
            "patterns": [
                {
                    "name": "string.regex.ts",
                    "begin": "/(?![/*])(?=(?:[^/\\\\\\[]|\\\\.|\\[([^\\]\\\\]|\\\\.)+\\])+/(?![/*]))",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.begin.ts"
                        }
                    },
                    "end": "/",
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.string.end.ts"
                        },
                        "2": {
                            "name": "keyword.other.ts"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#regexp"
                        }
                    ]
                }
            ]
        },
        "regexp": {
            "patterns": [
                {
                    "name": "keyword.control.anchor.regexp",
                    "match": "\\\\[bB]|\\^|\\$"
                },
                {
                    "name": "keyword.other.back-reference.regexp",
                    "match": "\\\\[1-9]\\d*"
                },
                {
                    "name": "keyword.operator.quantifier.regexp",
                    "match": "[?+*]|\\{(\\d+,\\d+|\\d+,|,\\d+|\\d+)\\}\\??"
                },
                {
                    "name": "keyword.operator.or.regexp",
                    "match": "\\|"
                },
                {
                    "name": "meta.group.assertion.regexp",
                    "begin": "(\\()((\\?=)|(\\?!))",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.group.regexp"
                        },
                        "2": {
                            "name": "punctuation.definition.group.assertion.regexp"
                        },
                        "3": {
                            "name": "meta.assertion.look-ahead.regexp"
                        },
                        "4": {
                            "name": "meta.assertion.negative-look-ahead.regexp"
                        }
                    },
                    "end": "(\\))",
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.group.regexp"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#regexp"
                        }
                    ]
                },
                {
                    "name": "meta.group.regexp",
                    "begin": "\\((\\?:)?",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.group.regexp"
                        },
                        "1": {
                            "name": "punctuation.definition.group.capture.regexp"
                        }
                    },
                    "end": "\\)",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.group.regexp"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#regexp"
                        }
                    ]
                },
                {
                    "name": "constant.other.character-class.set.regexp",
                    "begin": "(\\[)(\\^)?",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.character-class.regexp"
                        },
                        "2": {
                            "name": "keyword.operator.negation.regexp"
                        }
                    },
                    "end": "(\\])",
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.character-class.regexp"
                        }
                    },
                    "patterns": [
                        {
                            "name": "constant.other.character-class.range.regexp",
                            "match": "(?:.|(\\\\(?:[0-7]{3}|x\\h\\h|u\\h\\h\\h\\h))|(\\\\c[A-Z])|(\\\\.))\\-(?:[^\\]\\\\]|(\\\\(?:[0-7]{3}|x\\h\\h|u\\h\\h\\h\\h))|(\\\\c[A-Z])|(\\\\.))",
                            "captures": {
                                "1": {
                                    "name": "constant.character.numeric.regexp"
                                },
                                "2": {
                                    "name": "constant.character.control.regexp"
                                },
                                "3": {
                                    "name": "constant.character.escape.backslash.regexp"
                                },
                                "4": {
                                    "name": "constant.character.numeric.regexp"
                                },
                                "5": {
                                    "name": "constant.character.control.regexp"
                                },
                                "6": {
                                    "name": "constant.character.escape.backslash.regexp"
                                }
                            }
                        },
                        {
                            "include": "#regex-character-class"
                        }
                    ]
                },
                {
                    "include": "#regex-character-class"
                }
            ]
        },
        "regex-character-class": {
            "patterns": [
                {
                    "name": "constant.other.character-class.regexp",
                    "match": "\\\\[wWsSdDtrnvf]|\\."
                },
                {
                    "name": "constant.character.numeric.regexp",
                    "match": "\\\\([0-7]{3}|x\\h\\h|u\\h\\h\\h\\h)"
                },
                {
                    "name": "constant.character.control.regexp",
                    "match": "\\\\c[A-Z]"
                },
                {
                    "name": "constant.character.escape.backslash.regexp",
                    "match": "\\\\."
                }
            ]
        }
    }
}