/******************************************************************************
 * This file was generated by langium-cli 0.1.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck
import { createToken, Lexer } from 'chevrotain';
import { LangiumServices } from '../../services';
import { LangiumParser, DatatypeSymbol } from '../../parser/langium-parser';
import { LangiumGrammarGrammarAccess } from './grammar-access';
import { AbstractElement, AbstractMetamodelDeclaration, AbstractNegatedToken, AbstractRule, Annotation, Condition, Grammar, NamedArgument, Parameter, TerminalTokenElement, Action, Alternatives, Assignment, CrossReference, Group, Keyword, RuleCall, UnorderedGroup, GeneratedMetamodel, ReferencedMetamodel, NegatedToken, UntilToken, ParserRule, TerminalRule, Conjunction, Disjunction, LiteralCondition, Negation, ParameterReference, CharacterRange, TerminalAlternatives, TerminalRuleCall, Wildcard, TerminalGroup, TerminalToken, } from './ast';

const ID = createToken({ name: 'ID', pattern: /\^?[_a-zA-Z][\w_]*/ });
const INT = createToken({ name: 'INT', pattern: /[0-9]+/ });
const ML_COMMENT = createToken({ name: 'ML_COMMENT', pattern: /\/\*[\s\S]*?\*\//, group: 'hidden' });
const RegexLiteral = createToken({ name: 'RegexLiteral', pattern: /\/(?![*+?])(?:[^\r\n\[/\\]|\\.|\[(?:[^\r\n\]\\]|\\.)*\])+\// });
const SL_COMMENT = createToken({ name: 'SL_COMMENT', pattern: /\/\/[^\n\r]*/, group: 'hidden' });
const string = createToken({ name: 'string', pattern: /"[^"]*"|'[^']*'/ });
const WS = createToken({ name: 'WS', pattern: /\s+/, group: Lexer.SKIPPED });
const FragmentKeyword = createToken({ name: 'FragmentKeyword', pattern: /fragment/, longer_alt: ID });
const GenerateKeyword = createToken({ name: 'GenerateKeyword', pattern: /generate/, longer_alt: ID });
const TerminalKeyword = createToken({ name: 'TerminalKeyword', pattern: /terminal/, longer_alt: ID });
const CurrentKeyword = createToken({ name: 'CurrentKeyword', pattern: /current/, longer_alt: ID });
const GrammarKeyword = createToken({ name: 'GrammarKeyword', pattern: /grammar/, longer_alt: ID });
const ReturnsKeyword = createToken({ name: 'ReturnsKeyword', pattern: /returns/, longer_alt: ID });
const HiddenKeyword = createToken({ name: 'HiddenKeyword', pattern: /hidden/, longer_alt: ID });
const ImportKeyword = createToken({ name: 'ImportKeyword', pattern: /import/, longer_alt: ID });
const FalseKeyword = createToken({ name: 'FalseKeyword', pattern: /false/, longer_alt: ID });
const TrueKeyword = createToken({ name: 'TrueKeyword', pattern: /true/, longer_alt: ID });
const WithKeyword = createToken({ name: 'WithKeyword', pattern: /with/, longer_alt: ID });
const AsKeyword = createToken({ name: 'AsKeyword', pattern: /as/, longer_alt: ID });
const DashMoreThanKeyword = createToken({ name: 'DashMoreThanKeyword', pattern: /->/ });
const DotDotKeyword = createToken({ name: 'DotDotKeyword', pattern: /\.\./ });
const EqualsMoreThanKeyword = createToken({ name: 'EqualsMoreThanKeyword', pattern: /=>/ });
const PlusEqualsKeyword = createToken({ name: 'PlusEqualsKeyword', pattern: /\+=/ });
const QuestionMarkEqualsKeyword = createToken({ name: 'QuestionMarkEqualsKeyword', pattern: /\?=/ });
const AmpersandKeyword = createToken({ name: 'AmpersandKeyword', pattern: /&/ });
const AsteriskKeyword = createToken({ name: 'AsteriskKeyword', pattern: /\*/ });
const AtKeyword = createToken({ name: 'AtKeyword', pattern: /@/ });
const BracketCloseKeyword = createToken({ name: 'BracketCloseKeyword', pattern: /\]/ });
const BracketOpenKeyword = createToken({ name: 'BracketOpenKeyword', pattern: /\[/ });
const ColonKeyword = createToken({ name: 'ColonKeyword', pattern: /:/ });
const CommaKeyword = createToken({ name: 'CommaKeyword', pattern: /,/ });
const CurlyCloseKeyword = createToken({ name: 'CurlyCloseKeyword', pattern: /\}/ });
const CurlyOpenKeyword = createToken({ name: 'CurlyOpenKeyword', pattern: /\{/ });
const DotKeyword = createToken({ name: 'DotKeyword', pattern: /\./ });
const EqualsKeyword = createToken({ name: 'EqualsKeyword', pattern: /=/ });
const ExclamationMarkKeyword = createToken({ name: 'ExclamationMarkKeyword', pattern: /!/ });
const LessThanKeyword = createToken({ name: 'LessThanKeyword', pattern: /</ });
const MoreThanKeyword = createToken({ name: 'MoreThanKeyword', pattern: />/ });
const ParenthesisCloseKeyword = createToken({ name: 'ParenthesisCloseKeyword', pattern: /\)/ });
const ParenthesisOpenKeyword = createToken({ name: 'ParenthesisOpenKeyword', pattern: /\(/ });
const PipeKeyword = createToken({ name: 'PipeKeyword', pattern: /\|/ });
const PlusKeyword = createToken({ name: 'PlusKeyword', pattern: /\+/ });
const QuestionMarkKeyword = createToken({ name: 'QuestionMarkKeyword', pattern: /\?/ });
const SemicolonKeyword = createToken({ name: 'SemicolonKeyword', pattern: /;/ });

DashMoreThanKeyword.LABEL = "'->'";
CommaKeyword.LABEL = "','";
SemicolonKeyword.LABEL = "';'";
ColonKeyword.LABEL = "':'";
ExclamationMarkKeyword.LABEL = "'!'";
QuestionMarkKeyword.LABEL = "'?'";
QuestionMarkEqualsKeyword.LABEL = "'?='";
DotKeyword.LABEL = "'.'";
DotDotKeyword.LABEL = "'..'";
ParenthesisOpenKeyword.LABEL = "'('";
ParenthesisCloseKeyword.LABEL = "')'";
BracketOpenKeyword.LABEL = "'['";
BracketCloseKeyword.LABEL = "']'";
CurlyOpenKeyword.LABEL = "'{'";
CurlyCloseKeyword.LABEL = "'}'";
AtKeyword.LABEL = "'@'";
AsteriskKeyword.LABEL = "'*'";
AmpersandKeyword.LABEL = "'&'";
PlusKeyword.LABEL = "'+'";
PlusEqualsKeyword.LABEL = "'+='";
LessThanKeyword.LABEL = "'<'";
EqualsKeyword.LABEL = "'='";
EqualsMoreThanKeyword.LABEL = "'=>'";
MoreThanKeyword.LABEL = "'>'";
PipeKeyword.LABEL = "'|'";
AsKeyword.LABEL = "'as'";
CurrentKeyword.LABEL = "'current'";
FalseKeyword.LABEL = "'false'";
FragmentKeyword.LABEL = "'fragment'";
GenerateKeyword.LABEL = "'generate'";
GrammarKeyword.LABEL = "'grammar'";
HiddenKeyword.LABEL = "'hidden'";
ImportKeyword.LABEL = "'import'";
ReturnsKeyword.LABEL = "'returns'";
TerminalKeyword.LABEL = "'terminal'";
TrueKeyword.LABEL = "'true'";
WithKeyword.LABEL = "'with'";
export const tokens = [FragmentKeyword, GenerateKeyword, TerminalKeyword, CurrentKeyword, GrammarKeyword, ReturnsKeyword, HiddenKeyword, ImportKeyword, FalseKeyword, TrueKeyword, WithKeyword, AsKeyword, DashMoreThanKeyword, DotDotKeyword, EqualsMoreThanKeyword, PlusEqualsKeyword, QuestionMarkEqualsKeyword, AmpersandKeyword, AsteriskKeyword, AtKeyword, BracketCloseKeyword, BracketOpenKeyword, ColonKeyword, CommaKeyword, CurlyCloseKeyword, CurlyOpenKeyword, DotKeyword, EqualsKeyword, ExclamationMarkKeyword, LessThanKeyword, MoreThanKeyword, ParenthesisCloseKeyword, ParenthesisOpenKeyword, PipeKeyword, PlusKeyword, QuestionMarkKeyword, SemicolonKeyword, ID, INT, ML_COMMENT, RegexLiteral, SL_COMMENT, string, WS];
