import { createDefaultModule, DefaultModuleContext, inject, LangiumServices, Module, PartialLangiumServices } from 'langium';
import { <%= LanguageName %>GeneratedModule } from './generated/module';
import { <%= LanguageName %>ValidationRegistry, <%= LanguageName %>Validator } from './<%= language-id %>-validator';

/**
 * Declaration of custom services - add your own service classes here.
 */
export type <%= LanguageName %>AddedServices = {
    validation: {
        <%= LanguageName %>Validator: <%= LanguageName %>Validator
    }
}

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type <%= LanguageName %>Services = LangiumServices & <%= LanguageName %>AddedServices

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export const <%= LanguageName %>Module: Module<<%= LanguageName %>Services, PartialLangiumServices & <%= LanguageName %>AddedServices> = {
    validation: {
        ValidationRegistry: (injector) => new <%= LanguageName %>ValidationRegistry(injector),
        <%= LanguageName %>Validator: () => new <%= LanguageName %>Validator()
    }
};

/**
 * Inject the full set of language services by merging three modules:
 *  - Langium default services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 */
export function create<%= LanguageName %>Services(context?: DefaultModuleContext): <%= LanguageName %>Services {
    return inject(
        createDefaultModule(context),
        <%= LanguageName %>GeneratedModule,
        <%= LanguageName %>Module
    );
}
