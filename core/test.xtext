grammar xtext

terminal WS         : /\s+/;
terminal ID returns string: /\^?[_a-zA-Z][\w_]*/;
terminal INT returns number: /[0-9]+/;
terminal string: /"[^"]*"|'[^']*'/;



Grammar:
	'grammar' Name=ID ('with' UsedGrammars+=[Grammar|ID] (',' UsedGrammars+=[Grammar|ID])*)?
	(definesHiddenTokens?='hidden' '(' (HiddenTokens+=[AbstractRule|ID] (',' HiddenTokens+=[AbstractRule|ID])*)? ')')?
	MetamodelDeclarations+=AbstractMetamodelDeclaration*
	(rules+=AbstractRule)+
;

AbstractRule : ParserRule | TerminalRule | EnumRule;

AbstractMetamodelDeclaration :
	GeneratedMetamodel | ReferencedMetamodel;

GeneratedMetamodel :
	'generate' Name=ID EPackage=[string] ('as' Alias=ID)?;

ReferencedMetamodel :
	'import' EPackage=[string] ('as' Alias=ID)?;


Annotation:
	'@' Name = ID
;

ParserRule :
	(
	  ^fragment?='fragment' Name=ID ('<' (Parameters+=Parameter (',' Parameters+=Parameter)*)? '>')? (wildcard?='*' | ('returns' Type=ID)?)
	| Name=ID ('<' (Parameters+=Parameter (',' Parameters+=Parameter)*)? '>')? ('returns' Type=ID)?
	)
	(DefinesHiddenTokens?='hidden' '(' (HiddenTokens+=[AbstractRule|ID] (',' HiddenTokens+=[AbstractRule|ID])*)? ')')? ':'
		Alternatives=Alternatives
	';'
;

RuleNameAndParams:
	Name=ID ('<' (Parameters+=Parameter (',' Parameters+=Parameter)*)? '>')?
;

Parameter:
	Name=ID
;

Alternatives:
	UnorderedGroup ({Alternatives.Elements+=current} '|' Elements+=UnorderedGroup)*
;

UnorderedGroup:
	Group ({UnorderedGroup.Elements+=current} '&' Elements+=Group)*
;

Group:
	Elements+=AbstractToken*
;

AbstractToken:
	AbstractTokenWithCardinality |
	Action
;

AbstractTokenWithCardinality:
	(Assignment | AbstractTerminal) Cardinality=('?'|'*'|'+')?
;

Action:
	'{' Type=[ParserRule|ID] ('.' Feature=ID Operator=('='|'+=') 'current')? '}'
;

AbstractTerminal:
	Keyword |
	RuleCall |
	ParenthesizedElement |
	PredicatedKeyword |
	PredicatedRuleCall |
	PredicatedGroup
;

Keyword :
	Value=string
;

RuleCall :
	Rule=[AbstractRule|ID] ('<' Arguments+=NamedArgument (',' Arguments+=NamedArgument)* '>')?
;

NamedArgument:
	( Parameter=[Parameter|ID] CalledByName?= '=')?
	( Value=Disjunction )
;

LiteralCondition:
	True?='true' | 'false'
;

Disjunction:
	Conjunction ({Disjunction.Left=current} '|' Right=Conjunction)?
;

Conjunction:
	Negation ({Conjunction.Left=current} '&' Right=Negation)?
;

Negation:
	Atom | '!' Value=Negation
;

Atom:
	ParameterReference | ParenthesizedCondition | LiteralCondition
;

ParenthesizedCondition:
	'(' Value=Disjunction ')'
;

ParameterReference:
	Parameter=[Parameter|ID]
;

TerminalRuleCall:
	Rule=[AbstractRule|ID]
;

PredicatedKeyword:
	(Predicated?='=>' | FirstSetPredicated?='->') Value=string
;

PredicatedRuleCall:
	(Predicated?='=>' | FirstSetPredicated?='->') Rule=[AbstractRule|ID] ('<' Arguments+=NamedArgument (',' Arguments+=NamedArgument)* '>')?
;

Assignment:
	(Predicated?='=>' | FirstSetPredicated?='->')? Feature=ID Operator=('+='|'='|'?=') ^Terminal=AssignableTerminal
;

AssignableTerminal:
	Keyword | RuleCall | ParenthesizedAssignableElement | CrossReference
;

ParenthesizedAssignableElement:
	'(' AssignableAlternatives ')'
;

AssignableAlternatives:
	Elements+=AssignableTerminal ('|' Elements+=AssignableTerminal)*
;

CrossReference :
	'[' Type=[ParserRule|ID] ('|' ^Terminal=CrossReferenceableTerminal )? ']'
;

CrossReferenceableTerminal:
	Keyword | RuleCall
;

ParenthesizedElement:
	'(' Alternatives ')'
;

PredicatedGroup:
	(Predicated?='=>' | FirstSetPredicated?='->') '(' Elements+=Alternatives ')'
;

TerminalRule :
	'terminal' (^Fragment?='fragment' Name=ID | Name=ID ('returns' Type=ID)?) ':'
		Regex=RegexLiteral
	';'
;

terminal RegexLiteral returns string: /\/(?![*+?])(?:[^\r\n\[/\\]|\\.|\[(?:[^\r\n\]\\]|\\.)*\])+\//;

TerminalAlternatives:
	TerminalGroup ({TerminalAlternatives.Elements+=current} '|' Elements+=TerminalGroup)*
;

TerminalGroup:
	Elements+=TerminalToken*
;

TerminalToken:
	TerminalTokenElement Cardinality=('?'|'*'|'+')?
;

TerminalTokenElement:
	CharacterRange | TerminalRuleCall | ParenthesizedTerminalElement | AbstractNegatedToken | Wildcard
;

ParenthesizedTerminalElement:
	'(' TerminalAlternatives ')'
;

AbstractNegatedToken:
	NegatedToken | UntilToken
;

NegatedToken:
	'!' ^Terminal=TerminalTokenElement
;

UntilToken:
	'->' ^Terminal=TerminalTokenElement
;

Wildcard:
	{Wildcard} '.'
;

CharacterRange:
	Left=Keyword ('..' Right=Keyword)?
;

EnumRule:
	'enum' Name=ID ('returns' Type=ID)? ':'
		Alternatives=EnumLiterals
	';'
;

EnumLiterals:
	EnumLiteralDeclaration ({EnumLiterals.Elements+=current} '|' Elements+=EnumLiteralDeclaration)*
;

EnumLiteralDeclaration:
	EnumLiteral=[EnumLiterals|ID] ('=' Literal=Keyword)?
;