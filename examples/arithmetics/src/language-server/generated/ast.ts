/******************************************************************************
 * This file was generated by langium-cli 3.5.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable */
import * as langium from 'langium';

export const ArithmeticsTerminals = {
    WS: /\s+/,
    ID: /[_a-zA-Z][\w_]*/,
    NUMBER: /[0-9]+(\.[0-9]*)?/,
    ML_COMMENT: /\/\*[\s\S]*?\*\//,
    SL_COMMENT: /\/\/[^\n\r]*/,
};

export type ArithmeticsTerminalNames = keyof typeof ArithmeticsTerminals;

export type ArithmeticsKeywordNames =
    | "%"
    | "("
    | ")"
    | "*"
    | "+"
    | ","
    | "-"
    | "/"
    | ":"
    | ";"
    | "^"
    | "def"
    | "module";

export type ArithmeticsTokenNames = ArithmeticsTerminalNames | ArithmeticsKeywordNames;

export type AbstractDefinition = DeclaredParameter | Definition;

export const AbstractDefinition = 'AbstractDefinition';

export function isAbstractDefinition(item: unknown): item is AbstractDefinition {
    return reflection.isInstance(item, AbstractDefinition);
}

export type Expression = BinaryExpression | FunctionCall | NumberLiteral;

export const Expression = 'Expression';

export function isExpression(item: unknown): item is Expression {
    return reflection.isInstance(item, Expression);
}

export type Statement = Definition | Evaluation;

export const Statement = 'Statement';

export function isStatement(item: unknown): item is Statement {
    return reflection.isInstance(item, Statement);
}

export interface BinaryExpression extends langium.AstNode {
    readonly $container: BinaryExpression | Definition | Evaluation | FunctionCall;
    readonly $type: 'BinaryExpression';
    left: Expression;
    operator: '%' | '*' | '+' | '-' | '/' | '^';
    right: Expression;
}

export const BinaryExpression = 'BinaryExpression';

export function isBinaryExpression(item: unknown): item is BinaryExpression {
    return reflection.isInstance(item, BinaryExpression);
}

export interface DeclaredParameter extends langium.AstNode {
    readonly $container: Definition;
    readonly $type: 'DeclaredParameter';
    name: string;
}

export const DeclaredParameter = 'DeclaredParameter';

export function isDeclaredParameter(item: unknown): item is DeclaredParameter {
    return reflection.isInstance(item, DeclaredParameter);
}

export interface Definition extends langium.AstNode {
    readonly $container: Module;
    readonly $type: 'Definition';
    args: Array<DeclaredParameter>;
    expr: Expression;
    name: string;
}

export const Definition = 'Definition';

export function isDefinition(item: unknown): item is Definition {
    return reflection.isInstance(item, Definition);
}

export interface Evaluation extends langium.AstNode {
    readonly $container: Module;
    readonly $type: 'Evaluation';
    expression: Expression;
}

export const Evaluation = 'Evaluation';

export function isEvaluation(item: unknown): item is Evaluation {
    return reflection.isInstance(item, Evaluation);
}

export interface FunctionCall extends langium.AstNode {
    readonly $container: BinaryExpression | Definition | Evaluation | FunctionCall;
    readonly $type: 'FunctionCall';
    args: Array<Expression>;
    func: langium.Reference<AbstractDefinition>;
}

export const FunctionCall = 'FunctionCall';

export function isFunctionCall(item: unknown): item is FunctionCall {
    return reflection.isInstance(item, FunctionCall);
}

export interface Module extends langium.AstNode {
    readonly $type: 'Module';
    name: string;
    statements: Array<Statement>;
}

export const Module = 'Module';

export function isModule(item: unknown): item is Module {
    return reflection.isInstance(item, Module);
}

export interface NumberLiteral extends langium.AstNode {
    readonly $container: BinaryExpression | Definition | Evaluation | FunctionCall;
    readonly $type: 'NumberLiteral';
    value: number;
}

export const NumberLiteral = 'NumberLiteral';

export function isNumberLiteral(item: unknown): item is NumberLiteral {
    return reflection.isInstance(item, NumberLiteral);
}

export type ArithmeticsAstType = {
    AbstractDefinition: AbstractDefinition
    BinaryExpression: BinaryExpression
    DeclaredParameter: DeclaredParameter
    Definition: Definition
    Evaluation: Evaluation
    Expression: Expression
    FunctionCall: FunctionCall
    Module: Module
    NumberLiteral: NumberLiteral
    Statement: Statement
}

export class ArithmeticsAstReflection extends langium.AbstractAstReflection {
    override readonly types = {
        BinaryExpression: {
            name: BinaryExpression,
            properties: {
                left: {
                    name: 'left'
                },
                operator: {
                    name: 'operator'
                },
                right: {
                    name: 'right'
                }
            },
            superTypes: ['Expression'],
            // Property name constants
            _left: 'left',
            _operator: 'operator',
            _right: 'right'
        },
        DeclaredParameter: {
            name: DeclaredParameter,
            properties: {
                name: {
                    name: 'name'
                }
            },
            superTypes: ['AbstractDefinition'],
            // Property name constants
            _name: 'name'
        },
        Definition: {
            name: Definition,
            properties: {
                args: {
                    name: 'args',
                    defaultValue: []
                },
                expr: {
                    name: 'expr'
                },
                name: {
                    name: 'name'
                }
            },
            superTypes: ['AbstractDefinition', 'Statement'],
            // Property name constants
            _args: 'args',
            _expr: 'expr',
            _name: 'name'
        },
        Evaluation: {
            name: Evaluation,
            properties: {
                expression: {
                    name: 'expression'
                }
            },
            superTypes: ['Statement'],
            // Property name constants
            _expression: 'expression'
        },
        FunctionCall: {
            name: FunctionCall,
            properties: {
                args: {
                    name: 'args',
                    defaultValue: []
                },
                func: {
                    name: 'func',
                    referenceType: 'AbstractDefinition'
                }
            },
            superTypes: ['Expression'],
            // Property name constants
            _args: 'args',
            _func: 'func'
        },
        Module: {
            name: Module,
            properties: {
                name: {
                    name: 'name'
                },
                statements: {
                    name: 'statements',
                    defaultValue: []
                }
            },
            superTypes: [],
            // Property name constants
            _name: 'name',
            _statements: 'statements'
        },
        NumberLiteral: {
            name: NumberLiteral,
            properties: {
                value: {
                    name: 'value'
                }
            },
            superTypes: ['Expression'],
            // Property name constants
            _value: 'value'
        },
    } as const satisfies langium.AstMetaData
}

export const reflection = new ArithmeticsAstReflection();
