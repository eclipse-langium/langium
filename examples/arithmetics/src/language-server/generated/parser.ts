/******************************************************************************
 * This file was generated by langium-cli 0.1.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck
import { createToken, Lexer } from 'chevrotain';
import { LangiumParser, LangiumServices, DatatypeSymbol } from 'langium';
import { ArithmeticsGrammarAccess } from './grammar-access';
import { AbstractDefinition, Expression, Module, Statement, DeclaredParameter, Definition, Addition, Division, FunctionCall, Multiplication, NumberLiteral, Subtraction, Evaluation, } from './ast';

const COMMENT = createToken({ name: 'COMMENT', pattern: /\/(\*[\s\S]*?\*\/|\/[^\n\r]*)/, group: 'hidden' });
const ID = createToken({ name: 'ID', pattern: /[_a-zA-Z][\w_]*/ });
const NUMBER = createToken({ name: 'NUMBER', pattern: /[0-9]+(\.[0-9])?/ });
const WS = createToken({ name: 'WS', pattern: /\s+/, group: Lexer.SKIPPED });
const ModuleKeyword = createToken({ name: 'ModuleKeyword', pattern: /module/, longer_alt: ID });
const DefKeyword = createToken({ name: 'DefKeyword', pattern: /def/, longer_alt: ID });
const AsteriskKeyword = createToken({ name: 'AsteriskKeyword', pattern: /\*/ });
const ColonKeyword = createToken({ name: 'ColonKeyword', pattern: /:/ });
const CommaKeyword = createToken({ name: 'CommaKeyword', pattern: /,/ });
const DashKeyword = createToken({ name: 'DashKeyword', pattern: /-/ });
const ParenthesisCloseKeyword = createToken({ name: 'ParenthesisCloseKeyword', pattern: /\)/ });
const ParenthesisOpenKeyword = createToken({ name: 'ParenthesisOpenKeyword', pattern: /\(/ });
const PlusKeyword = createToken({ name: 'PlusKeyword', pattern: /\+/ });
const SemicolonKeyword = createToken({ name: 'SemicolonKeyword', pattern: /;/ });
const SlashKeyword = createToken({ name: 'SlashKeyword', pattern: /\//, longer_alt: COMMENT });

DashKeyword.LABEL = "'-'";
CommaKeyword.LABEL = "','";
SemicolonKeyword.LABEL = "';'";
ColonKeyword.LABEL = "':'";
ParenthesisOpenKeyword.LABEL = "'('";
ParenthesisCloseKeyword.LABEL = "')'";
AsteriskKeyword.LABEL = "'*'";
SlashKeyword.LABEL = "'/'";
PlusKeyword.LABEL = "'+'";
DefKeyword.LABEL = "'def'";
ModuleKeyword.LABEL = "'module'";
export const tokens = [ModuleKeyword, DefKeyword, AsteriskKeyword, ColonKeyword, CommaKeyword, DashKeyword, ParenthesisCloseKeyword, ParenthesisOpenKeyword, PlusKeyword, SemicolonKeyword, SlashKeyword, COMMENT, ID, NUMBER, WS];
