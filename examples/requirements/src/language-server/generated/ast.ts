/******************************************************************************
 * This file was generated by langium-cli 3.5.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable */
import * as langium from 'langium';

export const RequirementsAndTestsTerminals = {
    WS: /\s+/,
    ID: /[_a-zA-Z][\w_]*/,
    STRING: /"(\\.|[^"\\])*"|'(\\.|[^'\\])*'/,
    ML_COMMENT: /\/\*[\s\S]*?\*\//,
    SL_COMMENT: /\/\/[^\n\r]*/,
};

export type RequirementsAndTestsTerminalNames = keyof typeof RequirementsAndTestsTerminals;

export type RequirementsAndTestsKeywordNames =
    | ","
    | ":"
    | "="
    | "applicable"
    | "contact"
    | "environment"
    | "for"
    | "req"
    | "testFile"
    | "tests"
    | "tst";

export type RequirementsAndTestsTokenNames = RequirementsAndTestsTerminalNames | RequirementsAndTestsKeywordNames;

export interface Contact extends langium.AstNode {
    readonly $container: RequirementModel | TestModel;
    readonly $type: 'Contact';
    user_name: string;
}

export const Contact = {
    $type: 'Contact',
    user_name: 'user_name'
} as const;

export function isContact(item: unknown): item is Contact {
    return reflection.isInstance(item, Contact.$type);
}

export interface Environment extends langium.AstNode {
    readonly $container: RequirementModel;
    readonly $type: 'Environment';
    description: string;
    name: string;
}

export const Environment = {
    $type: 'Environment',
    description: 'description',
    name: 'name'
} as const;

export function isEnvironment(item: unknown): item is Environment {
    return reflection.isInstance(item, Environment.$type);
}

export interface Requirement extends langium.AstNode {
    readonly $container: RequirementModel;
    readonly $type: 'Requirement';
    environments: Array<langium.Reference<Environment>>;
    name: string;
    text: string;
}

export const Requirement = {
    $type: 'Requirement',
    environments: 'environments',
    name: 'name',
    text: 'text'
} as const;

export function isRequirement(item: unknown): item is Requirement {
    return reflection.isInstance(item, Requirement.$type);
}

export interface RequirementModel extends langium.AstNode {
    readonly $type: 'RequirementModel';
    contact?: Contact;
    environments: Array<Environment>;
    requirements: Array<Requirement>;
}

export const RequirementModel = {
    $type: 'RequirementModel',
    contact: 'contact',
    environments: 'environments',
    requirements: 'requirements'
} as const;

export function isRequirementModel(item: unknown): item is RequirementModel {
    return reflection.isInstance(item, RequirementModel.$type);
}

export interface Test extends langium.AstNode {
    readonly $container: TestModel;
    readonly $type: 'Test';
    environments: Array<langium.Reference<Environment>>;
    name: string;
    requirements: Array<langium.Reference<Requirement>>;
    testFile?: string;
}

export const Test = {
    $type: 'Test',
    environments: 'environments',
    name: 'name',
    requirements: 'requirements',
    testFile: 'testFile'
} as const;

export function isTest(item: unknown): item is Test {
    return reflection.isInstance(item, Test.$type);
}

export interface TestModel extends langium.AstNode {
    readonly $type: 'TestModel';
    contact?: Contact;
    tests: Array<Test>;
}

export const TestModel = {
    $type: 'TestModel',
    contact: 'contact',
    tests: 'tests'
} as const;

export function isTestModel(item: unknown): item is TestModel {
    return reflection.isInstance(item, TestModel.$type);
}

export type RequirementsAndTestsAstType = {
    Contact: Contact
    Environment: Environment
    Requirement: Requirement
    RequirementModel: RequirementModel
    Test: Test
    TestModel: TestModel
}

export class RequirementsAndTestsAstReflection extends langium.AbstractAstReflection {
    override readonly types = {
        Contact: {
            name: Contact.$type,
            properties: {
                user_name: {
                    name: Contact.user_name
                }
            },
            superTypes: []
        },
        Environment: {
            name: Environment.$type,
            properties: {
                description: {
                    name: Environment.description
                },
                name: {
                    name: Environment.name
                }
            },
            superTypes: []
        },
        Requirement: {
            name: Requirement.$type,
            properties: {
                environments: {
                    name: Requirement.environments,
                    defaultValue: [],
                    referenceType: Environment.$type
                },
                name: {
                    name: Requirement.name
                },
                text: {
                    name: Requirement.text
                }
            },
            superTypes: []
        },
        RequirementModel: {
            name: RequirementModel.$type,
            properties: {
                contact: {
                    name: RequirementModel.contact
                },
                environments: {
                    name: RequirementModel.environments,
                    defaultValue: []
                },
                requirements: {
                    name: RequirementModel.requirements,
                    defaultValue: []
                }
            },
            superTypes: []
        },
        Test: {
            name: Test.$type,
            properties: {
                environments: {
                    name: Test.environments,
                    defaultValue: [],
                    referenceType: Environment.$type
                },
                name: {
                    name: Test.name
                },
                requirements: {
                    name: Test.requirements,
                    defaultValue: [],
                    referenceType: Requirement.$type
                },
                testFile: {
                    name: Test.testFile
                }
            },
            superTypes: []
        },
        TestModel: {
            name: TestModel.$type,
            properties: {
                contact: {
                    name: TestModel.contact
                },
                tests: {
                    name: TestModel.tests,
                    defaultValue: []
                }
            },
            superTypes: []
        }
    } as const satisfies langium.AstMetaData
}

export const reflection = new RequirementsAndTestsAstReflection();
