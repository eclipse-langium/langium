/******************************************************************************
 * Copyright 2022 TypeFox GmbH
 * This program and the accompanying materials are made available under the
 * terms of the MIT License, which is available in the project root.
 ******************************************************************************/

import { createDefaultSharedModule, DefaultSharedModuleContext, inject, LangiumServices, LangiumSharedServices, Module, PartialLangiumServices } from 'langium';
import { RequirementsLangValidationRegistry, RequirementsLangValidator } from './requirements-lang-validator';

/**
 * Declaration of custom services - add your own service classes here.
 */
export type RequirementsLangAddedServices = {
    validation: {
        RequirementsLangValidator: RequirementsLangValidator
    }
}

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type RequirementsLangServices = LangiumServices & RequirementsLangAddedServices

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export const RequirementsLangModule: Module<RequirementsLangServices, PartialLangiumServices & RequirementsLangAddedServices> = {
    validation: {
        ValidationRegistry: (services) => new RequirementsLangValidationRegistry(services),
        RequirementsLangValidator: (services) => new RequirementsLangValidator(services)
    }
};


/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createArithmeticsServices(context: DefaultSharedModuleContext): {
    shared: LangiumSharedServices,
    arithmetics: RequirementsLangServices
} {
    const shared = inject(
        createDefaultSharedModule(context),
        RequirementsGenerationLangModule
    );
    const arithmetics = inject(
        createDefaultModule({ shared }),
        ArithmeticsGeneratedModule,
        ArithmeticsModule
    );
    shared.ServiceRegistry.register(arithmetics);
    return { shared, arithmetics };
}
