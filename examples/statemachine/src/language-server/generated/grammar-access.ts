/******************************************************************************
 * This file was generated by langium-cli 0.1.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

import { Assignment, CrossReference, Keyword, RuleCall, GrammarAccess } from 'langium';
import grammar from './grammar';

export type StatemachineRuleAccess = {
    StatemachineKeyword: Keyword;
    name: Assignment;
    nameIDRuleCall: RuleCall;
    EventsKeyword: Keyword;
    events: Assignment;
    eventsEventRuleCall: RuleCall;
    CommandsKeyword: Keyword;
    commands: Assignment;
    commandsCommandRuleCall: RuleCall;
    InitialStateKeyword: Keyword;
    init: Assignment;
    initStateCrossReference: CrossReference;
    states: Assignment;
    statesStateRuleCall: RuleCall;
}

export type EventRuleAccess = {
    name: Assignment;
    nameIDRuleCall: RuleCall;
}

export type CommandRuleAccess = {
    name: Assignment;
    nameIDRuleCall: RuleCall;
}

export type StateRuleAccess = {
    StateKeyword: Keyword;
    name: Assignment;
    nameIDRuleCall: RuleCall;
    ActionsKeyword: Keyword;
    CurlyOpenKeyword: Keyword;
    actions: Assignment;
    actionsCommandCrossReference: CrossReference;
    CurlyCloseKeyword: Keyword;
    transitions: Assignment;
    transitionsTransitionRuleCall: RuleCall;
    EndKeyword: Keyword;
}

export type TransitionRuleAccess = {
    event: Assignment;
    eventEventCrossReference: CrossReference;
    EqualsMoreThanKeyword: Keyword;
    state: Assignment;
    stateStateCrossReference: CrossReference;
}

export class StatemachineGrammarAccess extends GrammarAccess {
    Statemachine = this.buildAccess<StatemachineRuleAccess>('Statemachine');
    Event = this.buildAccess<EventRuleAccess>('Event');
    Command = this.buildAccess<CommandRuleAccess>('Command');
    State = this.buildAccess<StateRuleAccess>('State');
    Transition = this.buildAccess<TransitionRuleAccess>('Transition');

    constructor() {
        super(grammar());
    }
}
