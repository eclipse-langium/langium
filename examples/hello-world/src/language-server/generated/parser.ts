/******************************************************************************
 * This file was generated by langium-cli 0.1.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck
import { createToken, Lexer } from 'chevrotain';
import { LangiumParser, LangiumServices, DatatypeSymbol } from 'langium';
import { HelloWorldGrammarAccess } from './grammar-access';
import { Greeting, Model, Person, } from './ast';

const ID = createToken({ name: 'ID', pattern: /[_a-zA-Z][\w_]*/ });
const INT = createToken({ name: 'INT', pattern: /[0-9]+/ });
const ML_COMMENT = createToken({ name: 'ML_COMMENT', pattern: /\/\*[\s\S]*?\*\//, group: 'hidden' });
const SL_COMMENT = createToken({ name: 'SL_COMMENT', pattern: /\/\/[^\n\r]*/, group: 'hidden' });
const STRING = createToken({ name: 'STRING', pattern: /"[^"]*"|'[^']*'/ });
const WS = createToken({ name: 'WS', pattern: /\s+/, group: Lexer.SKIPPED });
const PersonKeyword = createToken({ name: 'PersonKeyword', pattern: /person/, longer_alt: ID });
const HelloKeyword = createToken({ name: 'HelloKeyword', pattern: /Hello/, longer_alt: ID });
const ExclamationMarkKeyword = createToken({ name: 'ExclamationMarkKeyword', pattern: /!/ });

ExclamationMarkKeyword.LABEL = "'!'";
HelloKeyword.LABEL = "'Hello'";
PersonKeyword.LABEL = "'person'";
const tokens = [PersonKeyword, HelloKeyword, ExclamationMarkKeyword, ID, INT, ML_COMMENT, SL_COMMENT, STRING, WS];

export class Parser extends LangiumParser {
    readonly grammarAccess: HelloWorldGrammarAccess;

    constructor(services: LangiumServices) {
        super(tokens, services);
    }

    Model = this.MAIN_RULE("Model", Model, () => {
        this.initializeElement(this.grammarAccess.Model);
        this.many(1, () => {
            this.or(1, [
                () => {
                    this.subrule(1, this.Person, this.grammarAccess.Model.personsPersonRuleCall);
                },
                () => {
                    this.subrule(2, this.Greeting, this.grammarAccess.Model.greetingsGreetingRuleCall);
                },
            ]);
        });
        return this.construct();
    });

    Person = this.DEFINE_RULE("Person", Person, () => {
        this.initializeElement(this.grammarAccess.Person);
        this.consume(1, PersonKeyword, this.grammarAccess.Person.PersonKeyword);
        this.consume(2, ID, this.grammarAccess.Person.nameIDRuleCall);
        return this.construct();
    });

    Greeting = this.DEFINE_RULE("Greeting", Greeting, () => {
        this.initializeElement(this.grammarAccess.Greeting);
        this.consume(1, HelloKeyword, this.grammarAccess.Greeting.HelloKeyword);
        this.consume(2, ID, this.grammarAccess.Greeting.personPersonCrossReference);
        this.consume(3, ExclamationMarkKeyword, this.grammarAccess.Greeting.ExclamationMarkKeyword);
        return this.construct();
    });

}
